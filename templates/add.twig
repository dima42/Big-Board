{% extends 'loggedin.twig' %}

{% block filters %}
{# <ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <a data-toggle="tab" class="nav-link" id="manual-tab" href="/news">Manually</a>
    </li>
    <li class="nav-item">
        <a data-toggle="tab" class="nav-link" id="url-tab" href="#">Batch URLs</a>
    </li>
    <li class="nav-item">
        <a data-toggle="tab" class="nav-link" id="title-tab" href="#">Batch Titles</a>
    </li>
</ul> #}

<h4 class="nav-header">Which meta?</h4>
<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" data-meta="-1" href="#">(Various)</a>
    </li>
    {% for meta in metas %}
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" data-meta="{{ meta.parent.id }}" href="#">{{ meta.parent.title }}</a>
    </li>
    {% endfor %}
</ul>
{% endblock %}


{% block content %}
<h1 class="mb-3">Add puzzle(s)</h1>

<form class="addForm" action="/add" method="post">
    <div class="addFormError alert alert-danger"></div>
    <div id="form-controls"></div>
    <div class="float-left">
        <button id="submit-button" class="btn btn-dark" type="submit">Add puzzles</button>
    </div>
    <div class="float-right">
        <button id="add-another-puzzle" class="btn btn-primary" type="button">+ Another puzzle form</button>
    </div>
</form>

<select id="metaSelectTemplate" class="form-control meta-select d-none">
        <option value="">- - -</option>
    {% for meta in metas %}
        <option value="{{ meta.parent.id }}">{{ meta.parent.title }}</option>
    {% endfor %}
        <option value="">- - -</option>
        <option value="0">ðŸ†• This is a new meta</option>
</select>
{% endblock %}

{% block scripts %}
<script>
var newPuzzleTemplate;
var successTemplate;
var selectedMeta = "";

function addPuzzleForm() {
    var puzzleData = [];
    puzzleData['i'] = $("#form-controls").children().length + 1;
    puzzleData['metaSelect'] = $('#metaSelectTemplate').clone().removeClass('d-none').html();
    var renderedForm = Mustache.render(newPuzzleTemplate, puzzleData);
    $('.addForm #form-controls').append(renderedForm);
    if (selectedMeta > 0) {
        $('.meta-select').val(selectedMeta).prop('disabled', 'disabled');
    }
}

function slugify(text) {
    var t = text.toString().toLowerCase()
        .replace(/\s+/g, '-')           // Replace spaces with -
        .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
        .replace(/\-\-+/g, '-')         // Replace multiple - with single -
        .replace(/^-+/, '')             // Trim - from start of text
        .replace(/-+$/, '');            // Trim - from end of text
    return t.substr(0, 21);
}

$(function() {
    $.get('/templates/add_puzzle.mst', function(template) {
        newPuzzleTemplate = template;
        addPuzzleForm();
        $('[data-meta={{meta_id}}]').click();
    });

    $.get('/templates/add_complete.mst', function(template) {
        successTemplate = template;
    });

    $('[data-meta]').click(function(e) {
        selectedMeta = $(this).data('meta');
        if (selectedMeta == -1) {
            $('.meta-select').attr('disabled', false);
        } else {
            $('.meta-select').val(selectedMeta).prop('disabled', 'disabled');
        }
    });

    $('#add-another-puzzle').click(addPuzzleForm);

    $('.addForm').submit(function(e) {
        e.preventDefault();

        // If form has already bene submitted, don't allow it to be submitted again
        if ($('#submit-button').prop('disabled')) {
            return;
        }

        $('.addFormError').hide();
        $('.is-invalid').removeClass('is-invalid');
        $('#submit-button').prop('disabled', true);
        $('body').addClass('trippy');

        $.post('/add', $('.addForm').serialize(), function(response) {
            $('body').removeClass('trippy');
            $.each(response['existingTitles'], function(i, puzzleID) {
                $('#' + puzzleID).find('.newPuzzleTitle input').addClass('is-invalid');
            });
            $.each(response['existingURLs'], function(i, puzzleID) {
                $('#' + puzzleID).find('.newPuzzleURL input').addClass('is-invalid');
            });
            $.each(response['existingSlacks'], function(i, puzzleID) {
                $('#' + puzzleID).find('.newPuzzleSlack input').addClass('is-invalid');
            });

            if ($('.is-invalid').length) {
                $('.addFormError').html('The values outlined in red are already in use. Please enter something unique and re-submit.').show();
                $('#submit-button').prop('disabled', false);
            } else {
                $('.addForm button').hide();
            }

            $.each(response['newPuzzles'], function(i, puzzleData) {
                var renderedCard = Mustache.render(successTemplate, puzzleData);
                $('#' + puzzleData['puzzleID']).html(renderedCard);
            });
        });
    });

    $('.addForm').on('click', '.removePuzzle', function(e) {
        e.preventDefault();
        $(this).closest('.puzzleInputGroup').remove();
    });

    $('.addForm').on('keyup', '.title-field', function(e) {
        var slackField = $(this).closest('.puzzleInputGroup').find('.slack-field');
        if (slackField.data('edited') != 1) {
            var slug = slugify($(this).val());
            $(this).closest('.puzzleInputGroup').find('.slack-field').val(slug);
        }
    });

    $('.addForm').on('keyup', '.slack-field', function(e) {
        if ($(this).val() != "") {
            $(this).data('edited', '1');
        } else {
            $(this).data('edited', '');
        }
    });
});
</script>
{% endblock %}
